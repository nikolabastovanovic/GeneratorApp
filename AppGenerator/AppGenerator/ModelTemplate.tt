<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Xml"#>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#
 // Read the model file
 XmlDocument doc = new XmlDocument();
 doc.Load(@"C:\Users\Johny\AppGenerator\Gramer.xml");

 string myAppName = string.Empty;
 XmlNode myAppNameNode = doc.SelectSingleNode(@"gramer/app_name");
 myAppName = myAppNameNode.InnerText; //Naziv aplikacije
 XmlNode dbNameNode = doc.SelectSingleNode(@"gramer/db_name");
 string dbName = dbNameNode.InnerText; //Naziv baze

 // Generate the code
 foreach (XmlNode xmlNodeTableName in doc.GetElementsByTagName("name"))
 {
	string modelName = xmlNodeTableName.InnerText;
#> 
using <#= myAppName #>;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace <#= myAppName #>.Models
{
	public partial class <#= modelName #>Model 
	{
		public string Insert<#= modelName #>(<#= modelName #> <#= modelName.ToLower() #>)
		{
			try
			{
				<#= dbName #>Entities db = new <#= dbName #>Entities();
				db.<#= modelName #>s.Add(<#= modelName.ToLower() #>);
				BeforeInsert(<#= modelName.ToLower() #>);
				db.SaveChanges();

				return <#= modelName.ToLower() #>.ID + " was succesufully inserted.";
			}
			catch (Exception e)
			{
			    return "Error: " + e;
			}
		}

		public string Update<#= modelName #>(int id, <#= modelName #> <#= modelName.ToLower() #>)
		{
		    try
		    {
				<#= dbName #>Entities db = new <#= dbName #>Entities();
		        <#= modelName #> tmp = db.<#= modelName #>s.Find(id);

				<#
				foreach (XmlNode xmlNodeTableColumns in doc.GetElementsByTagName("column"))
		        {
		            string modelColumnName = xmlNodeTableColumns.InnerText;
		            if (xmlNodeTableColumns.ParentNode.ParentNode.FirstChild.InnerText == modelName)
		            {
				#>
				tmp.<#= modelColumnName #> = <#= modelName.ToLower() #>.<#= modelColumnName #>;
				<#
					}
				}
				#>

				BeforeUpdate(<#= modelName.ToLower() #>);
				db.SaveChanges();
		        return <#= modelName.ToLower() #>.ID + " was succesufully updated.";
		    }
		    catch (Exception e)
		    {
		        return "Error: " + e;
			}
		}

		public string Delete<#= modelName #>(int id)
		{
		    try
		    {
		        <#= dbName #>Entities db = new <#= dbName #>Entities();
		        <#= modelName #> <#= modelName.ToLower() #> = db.<#= modelName #>s.Find(id);

		        db.<#= modelName #>s.Attach(<#= modelName.ToLower() #>);
		        db.<#= modelName #>s.Remove(<#= modelName.ToLower() #>);
				BeforeDelete(id);
		        db.SaveChanges();

		        return <#= modelName.ToLower() #>.ID + " was succesufully deleted.";
		    }
		    catch (Exception e)
		    {
		        return "Error: " + e;
		    }
		}

		public <#= modelName #> Get<#= modelName #>(int id)
		{
		    try
		    {
		        using (<#= dbName #>Entities db = new <#= dbName #>Entities())
		        {
		            <#= modelName #> <#= modelName.ToLower() #> = db.<#= modelName #>s.Find(id);
					BeforeGetDetails(<#= modelName.ToLower() #>);
		            return <#= modelName.ToLower() #>;
		        }
		    }
		    catch (Exception)
		    {
		        return null;
		    }
		}

		public List<<#= modelName #>> GetAll<#= modelName #>s()
		{
		    try
		    {
		        using(<#= dbName #>Entities db = new <#= dbName #>Entities())
		        {
		            List<<#= modelName #>> <#= modelName.ToLower() #>s = (from x in db.<#= modelName #>s select x).ToList();
					BeforeGetList(<#= modelName.ToLower() #>s);
		            return <#= modelName.ToLower() #>s;
		        }
		    }
		    catch (Exception)
		    {
		        return null;
		    }
		}

		partial void BeforeInsert(<#= modelName #> <#= modelName.ToLower() #>);
		partial void BeforeUpdate(<#= modelName #> <#= modelName.ToLower() #>);
		partial void BeforeDelete(int id);
		partial void BeforeGetDetails(<#= modelName #> <#= modelName.ToLower() #>);
		partial void BeforeGetList(List<<#= modelName #>> <#= modelName.ToLower() #>s);
	}
}
<#
string outputFileName = modelName + "Model.aspx.cs";

string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);

 }
#>